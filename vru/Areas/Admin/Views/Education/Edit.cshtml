@model VMEducation
@{
    var isNew = Model.Id == 0;
    ViewBag.Title = isNew ? "Добавить образование" : "Редактировать образование";
}
@section styles{
    <link href="@Url.Action("Css", "StaticContent", new { name="lightbox", area=""})" rel="stylesheet" />
    <style type="text/css">
        .grid-pictures tbody > tr > td:last-child {
            text-align: center;
            vertical-align: middle;
        }
    </style>
}
<h1>@ViewBag.Title</h1>
@if (!isNew)
{
    <div class="text-right">
        <div class="form-group">
            <form method="post" action="@Url.Action("Delete","Education")">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.Id)
                <button class="btn btn-danger" type="submit" onclick="if (!confirm('Удалить запись?')) { return false;}">Удалить</button>
            </form>
        </div>
    </div>
}
<form method="post" action="@Url.Action("Edit","Education")">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.PictureId, new { @class = "control-label" })
                @Html.EditorFor(x => x.PictureId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.PictureId)
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(x => x.Year, new { @class = "control-label" })
                @Html.DropDownListFor(x => x.Year, (SelectListItem[])ViewBag.Years, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Year)
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(x => x.Month, new { @class = "control-label" })
                @Html.DropDownListFor(x => x.Month, (SelectListItem[])ViewBag.Monthes, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Month)
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(x => x.Order, new { @class = "control-label" })
                @Html.EditorFor(x => x.Order, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Order)
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Html, new { @class = "control-label" })
        @Html.EditorFor(x => x.Html, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.Html)
    </div>

    <div class="form-group">
        <button class="btn btn-primary" type="submit">@(isNew ? "Добавить" : "Сохранить")</button>
        <a href="@Url.Action("Index")" class="btn btn-default">Назад</a>
    </div>
</form>
@section scripts{
    <script src="~/bower_components/ckeditor/ckeditor.js"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name="lightbox", area=""})"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name="jquery.validate", area=""})"></script>
    <script src="@Url.Action("Js", "StaticContent", new { name="jquery.validate.unobtrusive", area=""})"></script>
    <script>
        if (CKEDITOR.instances['Html']) {
            CKEDITOR.remove(CKEDITOR.instances['Html']);
        }
        CKEDITOR.replace('Html', { height: 300 });

        $(function () {
            $('#PictureId').sx_gvl();
        });
    </script>
}
