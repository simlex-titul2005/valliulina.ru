@model VMArticle
@{
    var isNew = Model.Id == 0;
}

<form method="post" action="@Url.Action("Edit", "Articles")" autocomplete="off">
    @Html.AntiForgeryToken()

    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.ModelCoreType)
    @Html.HiddenFor(x => x.UserId)
    @Html.HiddenFor(x => x.DateCreate)
    @Html.HiddenFor(x => x.DateUpdate)

    <div class="row">
        <div class="col-md-10">
            <div class="form-group">
                @Html.LabelFor(x => x.Title, new { @class = "control-label" })
                @Html.EditorFor(x => x.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите название статьи" } })
                @Html.ValidationMessageFor(x => x.Title)
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(x => x.Show, new { @class = "control-label" })
                @Html.EditorFor(x => x.Show, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Show)
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(x => x.DateOfPublication, new { @class = "control-label" })
                @Html.EditorFor(x => x.DateOfPublication, new { htmlAttributes = new { @class = "form-control", @placeholder = "Введите дату публикации" } })
                @Html.ValidationMessageFor(x => x.DateOfPublication)
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(x => x.CategoryId, new { @class = "control-label" })
                @Html.EditorFor(x => x.CategoryId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.CategoryId)
            </div>
        </div>
        <div class="col-md-4">
            @Html.LabelFor(x => x.FrontPictureId, new { @class = "control-label" })
            @Html.EditorFor(x => x.FrontPictureId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.FrontPictureId)
        </div>
        <div class="col-md-2">
            @Html.LabelFor(x => x.ShowFrontPictureOnDetailPage, new { @class = "control-label" })
            @Html.EditorFor(x => x.ShowFrontPictureOnDetailPage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.ShowFrontPictureOnDetailPage)
        </div>
    </div>

    @if (!isNew)
    {
        <div class="form-group">
            @Html.LabelFor(x => x.TitleUrl, new { @class = "control-label" })
            @Html.EditorFor(x => x.TitleUrl, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(x => x.TitleUrl)
        </div>

        <div class="alert alert-warning">
            <strong>Внимание!</strong> Строковый ключ задается автоматически на основе заголовка статьи. При изменению ключа изменяется канонический адрес страницы. Поэтому если страница является важной, то после изменения ключа необходимо добавить 301 редирект со старого адреса на новый, на который будет указывать измененный ключ.
        </div>
    }

    <div class="form-group">
        @Html.LabelFor(x => x.Html, new { @class = "control-label" }) <br /><br />
        @Html.EditorFor(x => x.Html, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(x => x.Html)
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">@(Model.Id == 0 ? "Добавить" : "Сохранить")</button>
        @Html.RouteLink("Назад", new { action = "Index" }, new { @class = "btn btn-default" })
    </div>
</form>

